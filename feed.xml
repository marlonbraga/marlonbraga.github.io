<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://marlonbraga.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://marlonbraga.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-04-17T02:48:19-03:00</updated><id>https://marlonbraga.github.io/feed.xml</id><title type="html">blank</title><subtitle>My notes from studing and research; =] </subtitle><entry xml:lang="pt-br"><title type="html">Atributos de Qualidade</title><link href="https://marlonbraga.github.io/posts/atributos-de-qualidade/" rel="alternate" type="text/html" title="Atributos de Qualidade"/><published>2023-03-10T07:00:00-03:00</published><updated>2023-03-10T07:00:00-03:00</updated><id>https://marlonbraga.github.io/posts/atributos-de-qualidade</id><content type="html" xml:base="https://marlonbraga.github.io/posts/atributos-de-qualidade/"><![CDATA[<h2 id="operacional">Operacional</h2> <table> <thead> <tr> <th><strong>TERMO</strong></th> <th><strong>DEFINIÇÃO</strong></th> </tr> </thead> <tbody> <tr> <td>Disponibilidade</td> <td>Quanto tempo o sistema precisará estar disponível (se 24 horas por dia, 7 dias por semana, as etapas precisam estar em vigor para permitir que o sistema esteja funcionando rapidamente em caso de falha).</td> </tr> <tr> <td>Continuidade</td> <td>Capacidade de recuperação de desastres.</td> </tr> <tr> <td>Desempenho</td> <td>Inclui teste de estresse, análise de pico, análise da frequência das funções usadas, capacidade necessária e tempos de resposta. A aceitação do desempenho às vezes requer um exercício próprio, levando meses para ser concluído.</td> </tr> <tr> <td>Recuperabilidade</td> <td>Requisitos de continuidade de negócios (por exemplo, em caso de desastre, com que rapidez o sistema deve estar online novamente?). Isso afetará a estratégia de backup e os requisitos para hardware duplicado.</td> </tr> <tr> <td>Confiabilidade/segurança</td> <td>Avalie se o sistema precisa ser à prova de falhas ou se é de missão crítica de uma forma que afeta vidas. Se falhar, custará à empresa grandes somas de dinheiro?</td> </tr> <tr> <td>Robustez</td> <td>Capacidade de lidar com condições de erro e limite durante a execução se a conexão com a Internet cair ou se houver uma queda de energia ou falha de hardware.</td> </tr> <tr> <td>Escalabilidade</td> <td>Capacidade do sistema de executar e operar à medida que o número de usuários ou solicitações aumenta.</td> </tr> </tbody> </table> <h2 id="estrutural">Estrutural</h2> <table> <thead> <tr> <th><strong>TERMO</strong></th> <th><strong>DEFINIÇÃO</strong></th> </tr> </thead> <tbody> <tr> <td>Configurabilidade</td> <td>Capacidade para os usuários finais alterarem facilmente aspectos da configuração do software (através de interfaces utilizáveis).</td> </tr> <tr> <td>Extensibilidade</td> <td>Quão importante é conectar novas peças de funcionalidade.</td> </tr> <tr> <td>Instalabilidade</td> <td>Facilidade de instalação do sistema em todas as plataformas necessárias.</td> </tr> <tr> <td>Alavancagem/reutilização</td> <td>Capacidade de alavancar componentes comuns em vários produtos.</td> </tr> <tr> <td>Localização</td> <td>Suporte para vários idiomas em telas de entrada/consulta em campos de dados; em relatórios, requisitos de caracteres multibyte e unidades de medida ou moedas.</td> </tr> <tr> <td>Manutenibilidade</td> <td>Quão fácil é aplicar as mudanças e aprimorar o sistema?</td> </tr> <tr> <td>Portabilidade</td> <td>O sistema precisa rodar em mais de uma plataforma? (Por exemplo, o front-end precisa ser executado no Oracle, bem como no SAP DB?)</td> </tr> <tr> <td>Capacidade de atualização</td> <td>Capacidade de atualizar fácil/rapidamente de uma versão anterior deste aplicativo/solução para uma versão mais recente em servidores e clientes.</td> </tr> </tbody> </table> <h2 id="cross-cutting">Cross-Cutting</h2> <table> <thead> <tr> <th><strong>TERMO</strong></th> <th><strong>DEFINIÇÃO</strong></th> </tr> </thead> <tbody> <tr> <td>Acessibilidade</td> <td>Acesso a todos os seus usuários, incluindo aqueles com deficiências como daltonismo ou perda auditiva.</td> </tr> <tr> <td>Arquivabilidade</td> <td>Os dados precisarão ser arquivados ou excluídos após um período de tempo? (Por exemplo, contas de clientes devem ser excluídas após três meses ou marcadas como obsoletas e arquivadas em um banco de dados secundário para acesso futuro.)</td> </tr> <tr> <td>Autenticação</td> <td>Requisitos de segurança para garantir que os usuários sejam quem dizem ser.</td> </tr> <tr> <td>Autorização</td> <td>Requisitos de segurança para garantir que os usuários possam acessar apenas determinadas funções dentro do aplicativo (por caso de uso, subsistema, página da Web, regra de negócios, nível de campo, etc.).</td> </tr> <tr> <td>Jurídico</td> <td>Em quais restrições legislativas o sistema está operando (proteção de dados, Sarbanes Oxley, GDPR, etc.)? Quais direitos de reserva a empresa exige? Quaisquer regulamentos sobre a forma como o aplicativo deve ser construído ou implantado?</td> </tr> <tr> <td>Privacidade</td> <td>Capacidade de ocultar transações de funcionários internos da empresa (transações criptografadas para que nem DBAs e arquitetos de rede possam vê-las).</td> </tr> <tr> <td>Segurança</td> <td>Os dados precisam ser criptografados no banco de dados? Criptografado para comunicação de rede entre sistemas internos? Que tipo de autenticação precisa estar em vigor para acesso de usuário remoto?</td> </tr> <tr> <td>Suportabilidade</td> <td>Qual nível de suporte técnico é necessário para o aplicativo? Que nível de registro e outros recursos são necessários para depurar erros no sistema?</td> </tr> <tr> <td>Usabilidade/atingibilidade</td> <td>Nível de treinamento necessário para que os usuários alcancem seus objetivos com o aplicativo/solução. Os requisitos de usabilidade precisam ser tratados tão seriamente quanto qualquer</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="sample-posts"/><category term="archtecture"/><summary type="html"><![CDATA[Os '-ilities', Características da Arquitetura Definidas]]></summary></entry><entry xml:lang="en"><title type="html">Quality Attributes</title><link href="https://marlonbraga.github.io/posts/quality-attributes/" rel="alternate" type="text/html" title="Quality Attributes"/><published>2023-03-10T07:00:00-03:00</published><updated>2023-03-10T07:00:00-03:00</updated><id>https://marlonbraga.github.io/posts/quality-attributes</id><content type="html" xml:base="https://marlonbraga.github.io/posts/quality-attributes/"><![CDATA[<table> <thead> <tr> <th><strong>MÉTRICA</strong></th> <th style="text-align: center"><strong>INDICADOR</strong></th> <th style="text-align: center"><strong>COMPARATIVO</strong></th> </tr> </thead> <tbody> <tr> <td>Índice de Manutenibilidade</td> <td style="text-align: center">51</td> <td style="text-align: center">+ 27%</td> </tr> <tr> <td>Complexidade Ciclimática</td> <td style="text-align: center">5</td> <td style="text-align: center">- 42%</td> </tr> <tr> <td>Acoplamento de Classes</td> <td style="text-align: center">0</td> <td style="text-align: center">- 6%</td> </tr> <tr> <td>Linhas de código</td> <td style="text-align: center">35</td> <td style="text-align: center">- 98</td> </tr> </tbody> </table> <h2 id="operational">Operational</h2> <table> <thead> <tr> <th><strong>TERM</strong></th> <th><strong>DEFINITION</strong></th> </tr> </thead> <tbody> <tr> <td>Availability</td> <td>How long the system will need to be available (if 24/7, steps need to be in place to allow the system to be up and running quickly in case of any failure).</td> </tr> <tr> <td>Continuity</td> <td>Disaster recovery capability.</td> </tr> <tr> <td>Performance</td> <td>Includes stress testing, peak analysis, analysis of the frequency of functions used, capacity required, and response times. Performance acceptance sometimes requires an exercise of its own, taking months to complete.</td> </tr> <tr> <td>Recoverability</td> <td>Business continuity requirements (e.g., in case of a disaster, how quickly is the system required to be on-line again?). This will affect the backup strategy and requirements for duplicated hardware.</td> </tr> <tr> <td>Reliability/safety</td> <td>Assess if the system needs to be fail-safe, or if it is mission critical in a way that affects lives. If it fails, will it cost the company large sums of money?</td> </tr> <tr> <td>Robustness</td> <td>Ability to handle error and boundary conditions while running if the internet connection goes down or if there’s a power outage or hardware failure.</td> </tr> <tr> <td>Scalability</td> <td>Ability for the system to perform and operate as the number of users or requests increases.</td> </tr> </tbody> </table> <h2 id="structural">Structural</h2> <table> <thead> <tr> <th><strong>TERM</strong></th> <th><strong>DEFINITION</strong></th> </tr> </thead> <tbody> <tr> <td>Configurability</td> <td>Ability for the end users to easily change aspects of the software’s configuration (through usable interfaces).</td> </tr> <tr> <td>Extensibility</td> <td>How important it is to plug new pieces of functionality in.</td> </tr> <tr> <td>Installability</td> <td>Ease of system installation on all necessary platforms.</td> </tr> <tr> <td>Leverageability/reuse</td> <td>Ability to leverage common components across multiple products.</td> </tr> <tr> <td>Localization</td> <td>Support for multiple languages on entry/query screens in data fields; on reports, multibyte character requirements and units of measure or currencies.</td> </tr> <tr> <td>Maintainability</td> <td>How easy it is to apply changes and enhance the system?</td> </tr> <tr> <td>Portability</td> <td>Does the system need to run on more than one platform? (For example, does the frontend need to run against Oracle as well as SAP DB?)</td> </tr> <tr> <td>Upgradeability</td> <td>Ability to easily/quickly upgrade from a previous version of this application/solution to a newer version on servers and clients.</td> </tr> </tbody> </table> <h2 id="cross-cutting">Cross-Cutting</h2> <table> <thead> <tr> <th><strong>TERM</strong></th> <th><strong>DEFINITION</strong></th> </tr> </thead> <tbody> <tr> <td>Accessibility</td> <td>Access to all your users, including those with disabilities like colorblindness or hearing loss.</td> </tr> <tr> <td>Archivability</td> <td>Will the data need to be archived or deleted after a period of time? (For example, customer accounts are to be deleted after three months or marked as obsolete and archived to a secondary database for future access.)</td> </tr> <tr> <td>Authentication</td> <td>Security requirements to ensure users are who they say they are.</td> </tr> <tr> <td>Authorization</td> <td>Security requirements to ensure users can access only certain functions within the application (by use case, subsystem, webpage, business rule, field level, etc.).</td> </tr> <tr> <td>Legal</td> <td>What legislative constraints is the system operating in (data protection, Sarbanes Oxley, GDPR, etc.)? What reservation rights does the company require? Any regulations regarding the way the application is to be built or deployed?</td> </tr> <tr> <td>Privacy</td> <td>Ability to hide transactions from internal company employees (encrypted transactions so even DBAs and network architects cannot see them).</td> </tr> <tr> <td>Security</td> <td>Does the data need to be encrypted in the database? Encrypted for network communication between internal systems? What type of authentication needs to be in place for remote user access?</td> </tr> <tr> <td>Supportability</td> <td>What level of technical support is needed by the application? What level of logging and other facilities are required to debug errors in the system?</td> </tr> <tr> <td>Usability/achievability</td> <td>Level of training required for users to achieve their goals with the application/solution. Usability requirements need to be treated as seriously as any</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="sample-posts"/><category term="archtecture"/><summary type="html"><![CDATA[The '-ilities', Architecture Characteristics Defined]]></summary></entry><entry xml:lang="en"><title type="html">Free plugins for VS 2022</title><link href="https://marlonbraga.github.io/posts/free-plugins-vs22/" rel="alternate" type="text/html" title="Free plugins for VS 2022"/><published>2023-02-18T22:00:00-03:00</published><updated>2023-02-18T22:00:00-03:00</updated><id>https://marlonbraga.github.io/posts/free-plugins-vs22</id><content type="html" xml:base="https://marlonbraga.github.io/posts/free-plugins-vs22/"><![CDATA[<p>Visual Studio 2022 looks great. But it can gain very interesting features when you add plugins to it.</p> <p>The most complete and famous plugin we have is <a href="https://www.jetbrains.com/pt-br/resharper/">ReSharper</a>. However, it is not the most… economical choice.</p> <p>Here are 3 choices of free plugins for those who don’t want to give up productivity but are <del>penny-pincher</del> interested saving money.</p> <h2 id="finecodecoverage">FineCodeCoverage</h2> <p>Do you do automated tests? Good job. But do you know how much of your code is covered by tests and which lines are unprotected?</p> <p>With this plugin you can check the code coverage of each class and method directly from VS22.</p> <p>The <a href="https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage">FineCodeCoverage</a> also indicates in the editor if the line of code is covered or not by some test. The color of the colored bar to the left of the line numbering indicates its coverage status.</p> <ul> <li>green: line covered by test</li> <li>red: line not covered by test</li> <li>yellow: line partially covered by test</li> </ul> <blockquote> <p>Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage">FineCodeCoverage</a><br/> GitHub: <a href="https://github.com/FortuneN/FineCodeCoverage">Repository</a></p> </blockquote> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/coveraged-line.png" alt="coveraged-line"/> <img src="/assets/img/2023-03-01-plugin-free-vs22/coveraged-percentage.png" alt="coveraged-percentage"/></p> <h2 id="codemaintainability-2022">CodeMaintainability 2022</h2> <p>Visual Studio performs quality check of your code through <code class="language-plaintext highlighter-rouge">Analyser &gt; Calculate Code Metrics</code>. However, <a href="https://marketplace.visualstudio.com/items?itemName=ognjen-babic.CodeMaintainability2022">CodeMaintainability 2022</a> allows this visualization directly in the editor. Displaying in the signature of each method its <strong>maintenance index</strong> and an icon indicating the “health” of its code.</p> <p>Clicking on the index indicator displays other measurements of code quality for that method.</p> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/code-maintenability.png" alt="code-maintenability"/></p> <p>The only thing missing was the <strong>cognitive complexity</strong> metric to be complete.</p> <blockquote> <p>Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=ognjen-babic.CodeMaintainability2022">CodeMaintainability 2022</a></p> </blockquote> <h2 id="codemaid">CodeMaid</h2> <p>Visual Studio is able to make some refactoring suggestions in your code. The <a href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaidVS2022">CodeMaid</a> plugin increases the IDE’s native repertoire and enables a wider range of refactorings to make your code more clean and simple.</p> <p>In addition, the plugin also has features such as:</p> <ul> <li>Detection of <em>code smells</em></li> <li>General code cleanup</li> <li>Configuration of cleaning rules</li> <li>Spades: Class structure screen</li> <li> <p>Build loading bar</p> <blockquote> <p>Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaidVS2022">CodeMaid</a><br/> GitHub: <a href="https://github.com/codecadwallader/codemaid">Repository</a></p> </blockquote> </li> </ul> <h3 id="miscellaneous-resources">Miscellaneous Resources</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-menu.png" alt="code-maintenability"/></p> <h3 id="build-loading-bar">Build loading bar:</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-buildbar.png" alt="code-maintenability"/></p> <h3 id="spades---class-structure">Spades - Class structure</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-spades.png" alt="code-maintenability"/></p> <h3 id="configuration-of-options-and-rules">Configuration of options and rules</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-options.png" alt="code-maintenability"/></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[More productivity with VisualStudio 22 without paying more]]></summary></entry><entry xml:lang="pt-br"><title type="html">Plugins gratuitos para VS 2022</title><link href="https://marlonbraga.github.io/posts/plugins-gratis-vs22/" rel="alternate" type="text/html" title="Plugins gratuitos para VS 2022"/><published>2023-02-18T22:00:00-03:00</published><updated>2023-02-18T22:00:00-03:00</updated><id>https://marlonbraga.github.io/posts/plugins-gratis-vs22</id><content type="html" xml:base="https://marlonbraga.github.io/posts/plugins-gratis-vs22/"><![CDATA[<p>O Visual Studio 2022 está excelente. Mas ele pode ganhar recursos muito interessantes quando se adiciona plugins nele.</p> <p>O plugin mais completo e famoso que temos é o <a href="https://www.jetbrains.com/pt-br/resharper/">ReSharper</a>. Porém não é a escolha mais… econômica.</p> <p>Aqui estão 3 escolhas para de plugins gratuitos para quem não quer abrir mão da produtividade mas é <del>mão-fechada</del> interessado em economizar dinheiro.</p> <h2 id="finecodecoverage">FineCodeCoverage</h2> <p>Você faz testes automatizados? Bom trabalho. Mas sabe dizer o quanto de seu código está coberto por testes e quais são as linhas que estão desprotegidas?</p> <p>Com esse plugin você pode verificar a cobertura de código de cada classe e método diretamente pelo VS22.</p> <p>O <a href="https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage">FineCodeCoverage</a> também indica no editor se a linha de código está coberta ou não por algum teste. A cor da barra colorida ao lado esquerdo da numeração da linha, indica seu status de cobertura.</p> <ul> <li>verde: linha coberta por teste</li> <li>vermelho: linha não coberta por teste</li> <li>amarelo: linha parcialmente coberta por teste</li> </ul> <blockquote> <p>Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage">FineCodeCoverage</a><br/> GitHub: <a href="https://github.com/FortuneN/FineCodeCoverage">Repository</a></p> </blockquote> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/coveraged-line.png" alt="coveraged-line"/> <img src="/assets/img/2023-03-01-plugin-free-vs22/coveraged-percentage.png" alt="coveraged-percentage"/></p> <h2 id="codemaintainability-2022">CodeMaintainability 2022</h2> <p>O Visual Studio realiza verificação da qualidade do seu código através do <code class="language-plaintext highlighter-rouge">Analyser &gt; Calculate Code Metrics</code>. Porém, com o <a href="https://marketplace.visualstudio.com/items?itemName=ognjen-babic.CodeMaintainability2022">CodeMaintainability 2022</a> permite essa visualização diretamente no editor. Exibindo na assinatura de cada método seu <strong>índice de manutenibilidade</strong> e um ícone com a indicação da “saúde” de seu código.</p> <p>Ao clicar no indicador do índice, é exibido outras medições da qualidade de código referente aquele método.</p> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/code-maintenability.png" alt="code-maintenability"/></p> <p>Só faltou a métrica de <strong>complexidade cognitiva</strong> para ficar completo.</p> <blockquote> <p>Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=ognjen-babic.CodeMaintainability2022">CodeMaintainability 2022</a></p> </blockquote> <h2 id="codemaid">CodeMaid</h2> <p>O Visual Studio é capaz de fazer algumas sugestões de refatoração no seu código. O plugin <a href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaidVS2022">CodeMaid</a> aumenta o repertório nativo da IDE e possibilita uma gama maior de refatorações para deixar seu código mias limpo e simples.</p> <p>Além disso, o plugin também conta com recursos como:</p> <ul> <li>Detecção de <em>code smells</em></li> <li>Limpeza geral de código</li> <li>Configuração de regras de limpeza</li> <li>Spades: Tela de estrutura de classes</li> <li>Barra de carregamento de build</li> </ul> <blockquote> <p>Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaidVS2022">CodeMaid</a><br/> GitHub: <a href="https://github.com/codecadwallader/codemaid">Repository</a></p> </blockquote> <h3 id="recursos-variados">Recursos Variados</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-menu.png" alt="code-manutenability"/></p> <h3 id="barra-de-carregamento-de-build">Barra de carregamento de build:</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-buildbar.png" alt="code-manutenability"/></p> <h3 id="spades---estrutura-de-classe">Spades - Estrutura de classe</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-spades.png" alt="code-manutenability"/></p> <h3 id="configuração-de-opções-e-regras">Configuração de opções e regras</h3> <p><img src="/assets/img/2023-03-01-plugin-free-vs22/codemaid-options.png" alt="code-manutenability"/></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Mais produtividade com VisualStudio 22 sem pagar mais]]></summary></entry><entry xml:lang="pt-br"><title type="html">Fazendo Pull Requests elegantes</title><link href="https://marlonbraga.github.io/posts/pull-request-elegante/" rel="alternate" type="text/html" title="Fazendo Pull Requests elegantes"/><published>2023-02-16T15:00:00-03:00</published><updated>2023-02-16T15:00:00-03:00</updated><id>https://marlonbraga.github.io/posts/pull-request-elegante</id><content type="html" xml:base="https://marlonbraga.github.io/posts/pull-request-elegante/"><![CDATA[<p>A revisão de código alheio pode ser uma tarefa ingrata. Principalmente quando contém uma grande quantidade de alterações.</p> <p>O ideal é sempre optar por pull-requests pequenos. Porém isso bem sempre é possível.</p> <p>Nesses casos, podemos facilitar a vida da infeliz criatura que terá de revisar essa quantidade quase infinita de mudanças em um código. Afinal de contas, não queremos que erros entrem na branch principal do nosso repositório e esse código não foi escrito por ele.</p> <p>Um bom Reademe pode ser útil nessa tarefa. Mas o que seria revante colocar em uma descrição de Pull Request?</p> <h2 id="objetivo">Objetivo</h2> <p>Por que foi necessário criar esse PR? Que problemas ele resolve?</p> <ul> <li>Print se tiver uma interface gráfica</li> <li>Link da estória de usuário/requisito funcional/caso de uso</li> </ul> <p>Ex.:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>O objetivo dessas alterações é a refatoração da classe `GameService` .
Mais especificamente, o método `SaveGame`.
</code></pre></div></div> <h2 id="decisões-de-design">Decisões de design</h2> <p>Mas por quê precisava criar uma classe nova em vez de usar a existente? Por quê separar um trecho de código de uma classe? Precisava mesmo de tanta interface assim? Porque essas classes novas estão nesse diretório e não na pasta raiz?</p> <p>Não. Os revisores de código não são adivinhos. A decisões de design de código não são óbvias e não seria elegante deixar ele gastar tempo tentando decifrar escolhas que você poderia escrever com poucos caracteres. O que é relevante é o seguinte:</p> <ul> <li>Quais Interfacesm classes ou métodos foram aleterados/criados</li> <li>Qual foi o objetivo em realizar cada alteração?</li> <li>Quais descições foram tomadas</li> <li>Qual o princípio de design que foi considerado para tomar essa decisão? SOLID?</li> </ul> <p>Um diagrama de classes básico, pode economizar um tempo precioso se quiser realmente que entendam o que você fez.</p> <p>Ex.:</p> <blockquote> <p>Para permitir a criação de testes unitários, foi necessário adequar a classe ao princípio de Inversão de controle (SOLID). Todas as chamadas ao contexto do banco de dados foi removida da classe service para novas classes de DAO <code class="language-plaintext highlighter-rouge">CreatureRepository</code> , <code class="language-plaintext highlighter-rouge">PlayersRepository</code>, <code class="language-plaintext highlighter-rouge">ExperiencePointsRepository</code>. A classe <code class="language-plaintext highlighter-rouge">DungeonBuilderService</code> passa a depender de suas abstrações possibilitando o desacoplamento necessário para realização de testes unitários.</p> </blockquote> <p><img src="/assets/img/2023-02-16-pull-request-elegante/class-diagram.png" alt="Diagrama de clases"/></p> <h2 id="métricas-de-qualidade-de-código">Métricas de Qualidade de código</h2> <p>Dê segurança ao revisor de você se importou manter seu código manutenível em vez de sair bagunçando tudo só para entregar a tarefa mais rápido.</p> <p>Os fatos não se importam com a opinião de ninguém. Métricas dizem os fatos e atropelam a opinião de seus revisores mais implicantes. É uma forma de contornar a objeção relacionadas a “estilo de escrita”. Afinal de contas, deve-se sacrificar nosso índice de manutenibilidade do código por causa de um capricho do revisor? Será que preferências estéticas tem tanta importância quando a uma queda no acoplamento na classe tal ou um método que nasceu com baixa complexidade cognitiva? Obs.: (Se seu código estiver ferindo nenhum acordo ou padrão pré-estabelecido pelo time, não é uma questão de opinião. Você deve altera-lo sim)</p> <p>Um print do Code Analyser do Visual Studio é bem-vindo. Mas uma tabela simples serve.</p> <p>Ex.:</p> <blockquote> <p>Código resultante demonstrou maior legibilidade.<br/> - Aumento de Índice de manutenabilidade <em>(de 24 para 51)</em><br/> - Diminuição de Acoplamento de Classes <em>(de 16 para 10)</em><br/> - Redução de Complexidade ciclomática <em>(de 47 para 5)</em><br/> - Redução de linhas de código <em>(de 133 para 35)</em></p> <p>Parte dessa melhora se deu por causa da <em>extração de método</em> criando o <code class="language-plaintext highlighter-rouge">ConverterModelParaEntidade()</code>.</p> </blockquote> <table> <thead> <tr> <th><strong>MÉTRICA</strong></th> <th style="text-align: center"><strong>INDICADOR</strong></th> <th style="text-align: center"><strong>COMPARATIVO</strong></th> </tr> </thead> <tbody> <tr> <td>Índice de Manutenibilidade</td> <td style="text-align: center">51</td> <td style="text-align: center">+ 27%</td> </tr> <tr> <td>Complexidade Ciclimática</td> <td style="text-align: center">5</td> <td style="text-align: center">- 42%</td> </tr> <tr> <td>Acoplamento de Classes</td> <td style="text-align: center">0</td> <td style="text-align: center">- 6%</td> </tr> <tr> <td>Linhas de código</td> <td style="text-align: center">35</td> <td style="text-align: center">- 98</td> </tr> </tbody> </table> <p><img src="/assets/img/2023-02-16-pull-request-elegante/code-metrics.png" alt="Code_metrics"/></p> <p>Para um profissional de código, é melhor ser reconhecido pela qualidade do meu trabalho do que a velocidade com a que entrego. Essa é uma ótima forma de mostrar.</p> <h2 id="testes">Testes</h2> <p>Sim. É necessário saber se isso está funcionando e se está quebrando algo. Executar testes automatizados são úteis para mostrar que você fez o mínimo esperado de você. Mas uma análise mais detalhada pode dar um panomora geral sobre a qualidade especificamente do que você fez. Algumas informações importantes são:</p> <ul> <li>Quantos testes automatizados foram criados</li> <li>Qual é a porcentagem da cobertura de código alterado</li> <li>Quantos fluxos de código estão sendo testados</li> <li>Variação de Performance</li> <li>Quais testes manuais foram executados</li> </ul> <p>Ex.:</p> <blockquote> <ul> <li>2 novos testes unitário criados</li> <li>Cobertura de todos os fluxos de código do método em questão (2/2)</li> <li>100% de cobertura de código no método em questão</li> <li>Aumento de cobetura de código em métodos relacionados</li> </ul> </blockquote> <p><img src="/assets/img/2023-02-16-pull-request-elegante/code-coverage.png" alt="code-coverage"/></p> <h2 id="integração">Integração</h2> <p>As vezes a alteração não é com o código mas com a alteração em si e o quanto isso pode afetar a estabilidade do sitema em funcionamento.</p> <ul> <li>Impacta outras áreas</li> <li>Impacta sistemas já em funcionamento?</li> <li>Há alguma configuração no sistema aser feita?</li> </ul> <hr/> <h2 id="template-de-pr">Template de PR:</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>O objetivo dessas alterações é __________.

### **📐Decisões de design**
Para permitir a criação de testes unitários, foi necessário adequar a classe ao princípio de **Inversão de controle (SOLID)** .
Todas as chamadas ao contexto do banco de dados foi removida da classe service para novas classes DAO `______` , `______`, `______`. A classe `ResgatesAgendadosService` passa a depender de suas abstrações possibilitando desacoplamento necessário para realização de testes unitários.

![Diagrama de clases](image.jpg)

### **🌡️Qualidade de código**
Código resultante demonstrou maior legibilidade.  
	- Aumento de Índice de manutenabilidade  
	- Diminuição de Acoplamento de Classes  
	- Redução de Complexidade ciclomática  
	- Redução de linhas de código  
Parte dessa melhora se deu por causa da *extração de método* criando o ` ______()`.

![Code_metrics](image.png)  
| **MÉTRICA**                | **INDICADOR** | **EVOLUÇÃO** |
| -------------------------- |:-------------:|:------------:|
| Complexidade Cognitiva     | 10%           | + 100%       |
| Complexidade Ciclimática   | 1             | + 100%       | 
| Profundidade de herança    | 0             | - 100%       |
| Índice de Manutenibilidade | 100           | + 100%       |
| Acoplamento de Classes     | 0             | - 100%       |
| Linhas de código           | 1000          | + 100%       |

### **🧪Testes Automatizados**
  - ___ novos testes unitários criados
  - Cobertura de todos os fluxos de código do método em questão (___/___)
  - ___% de cobertura de código no método em questão
  - Aumento de cobetura de código em métodos relacionados
	
![testes](image.png)

Cobertura
![code-cov](image.png)

</code></pre></div></div> <h2 id="pr-template">PR Template:</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The purpose of these changes is __________.

# **📐Design Decisions**
To allow the creation of unit tests, it was necessary to adapt the class to the principle of **Inversion of control (SOLID)** .
All database context calls have been removed from the service class for new DAO classes `______` , `______`, `______`. The `ResgatesAgendadosService` class starts to depend on its abstractions, allowing the necessary decoupling to carry out unit tests.

![Class diagram](image.jpg)

# **🌡️Code quality**
Resulting code demonstrated greater readability.
- Increased maintainability index
- Decreased Coupling of Classes
- Reduction of Cyclomatic Complexity
- Reduction of lines of code
Part of this improvement was due to *method extraction* creating ` ______()`.

![Code_metrics](image.png)
| **METRIC** | **INDICATOR** | **EVOLUTION** |
| -------------------------- |:-------------:|:------ ------ :|
| Cognitive Complexity | 10% | + 100% |
| Cyclimatic Complexity | 1 | + 100% |
| Inheritance Depth | 0 | - 100% |
| Maintainability Index | 100 | + 100% |
| Class Coupling | 0 | - 100% |
| Lines of code | 1000 | + 100% |

# **🧪Automated Tests**
   - ___ new unit tests created
   - Coverage of all code streams of the method in question (___/___)
   - ___% code coverage on the method in question
   - Increased code coverage in related methods

![tests](image.png)

Coverage
![code-cov](image.png)

</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[O que devemos escrever na descrição de nosso PR?]]></summary></entry><entry xml:lang="en"><title type="html">Making elegant Pull Requests</title><link href="https://marlonbraga.github.io/posts/elegant-pull-request/" rel="alternate" type="text/html" title="Making elegant Pull Requests"/><published>2023-02-16T12:09:00-03:00</published><updated>2023-02-16T12:09:00-03:00</updated><id>https://marlonbraga.github.io/posts/elegant-pull-request</id><content type="html" xml:base="https://marlonbraga.github.io/posts/elegant-pull-request/"><![CDATA[<p>Reviewing someone else’s code can be a thankless task. Especially when it contains a large amount of changes.</p> <p>The ideal is always to opt for small pull-requests. But that is always possible.</p> <p>In these cases, we can make life easier for the unfortunate creature who will have to review this almost infinite amount of changes in a code. After all, we don’t want bugs to make it into our repository’s master branch, and this code wasn’t written by him.</p> <p>A good Readme can be helpful in this task. But what would it be relevant to put in a Pull Request description?</p> <h2 id="goal">Goal</h2> <p>Why was it necessary to create this PR? What problems does it solve?</p> <ul> <li>Print if it has a GUI</li> <li>User story/functional requirement/use case link</li> </ul> <p>Ex.:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The purpose of these changes is the refactoring of the `GameService` class.
More specifically, the `SaveGame` method.
</code></pre></div></div> <h2 id="design-decisions">Design decisions</h2> <p>But why did you need to create a new class instead of using the existing one? Why separate a piece of code from a class? Did you really need that much interface? Why are these new classes in that directory and not in the root folder?</p> <p>No. Code reviewers are not fortune tellers. The code design decisions aren’t obvious, and it wouldn’t be elegant to let him spend time trying to decipher choices you could write in a few characters. What is relevant is the following:</p> <ul> <li>Which Interfacesm classes or methods were changed/created</li> <li>What was the purpose of making each change?</li> <li>What decisions were taken</li> <li>What design principle was considered to make this decision? SOLID?</li> </ul> <p>A basic class diagram can save you precious time if you really want people to understand what you’ve done.</p> <p>Ex.:</p> <blockquote> <p>To allow the creation of unit tests, it was necessary to adapt the class to the principle of Inversion of Control (SOLID). All database context calls removed from service class for new DAO classes <code class="language-plaintext highlighter-rouge">CreatureRepository</code> , <code class="language-plaintext highlighter-rouge">PlayersRepository</code>, <code class="language-plaintext highlighter-rouge">ExperiencePointsRepository</code>. The <code class="language-plaintext highlighter-rouge">DungeonBuilderService</code> class starts to depend on its abstractions, allowing the necessary decoupling to carry out unit tests.</p> </blockquote> <p><img src="/assets/img/2023-02-16-pull-request-elegante/class-diagram.png" alt="Class diagram"/></p> <h2 id="code-quality-metrics">Code Quality Metrics</h2> <p>Assure the reviewer that you cared about keeping your code maintainable instead of messing around just to get the job done faster.</p> <p>Facts don’t care about anyone’s opinion. Metrics tell the facts and trump the opinion of your most picky reviewers. It’s a way around the “writing style” objection. After all, should we sacrifice our code maintainability rating for a reviewer’s whim? Do aesthetic preferences matter as much as a drop in class coupling or a method that was born with low cognitive complexity? Obs.: (If your code is violating any pre-established agreement or standard by the team, it is not a matter of opinion. You should change it)</p> <p>A screenshot of the Visual Studio Code Analyzer is welcome. But a simple table will do.</p> <p>Ex.:</p> <blockquote> <p>Resulting code demonstrated greater readability.</p> <ul> <li>Increased maintainability index <em>(from 24 to 51)</em></li> <li>Decrease in Class Coupling <em>(from 16 to 10)</em></li> <li>Reduction of Cyclomatic Complexity <em>(from 47 to 5)</em></li> <li>Reduction of lines of code <em>(from 133 to 35)</em></li> </ul> <p>Part of this improvement was due to <em>method extraction</em> creating <code class="language-plaintext highlighter-rouge">ConverterModelParaEntidade()</code>.</p> </blockquote> <table> <thead> <tr> <th><strong>METRIC</strong></th> <th style="text-align: center"><strong>INDICATOR</strong></th> <th style="text-align: left"><strong>COMPARATIVE</strong></th> </tr> </thead> <tbody> <tr> <td>Maintainability Index</td> <td style="text-align: center">51</td> <td style="text-align: left">+ 27%</td> </tr> <tr> <td>Cyclimatic Complexity</td> <td style="text-align: center">5</td> <td style="text-align: left">- 42%</td> </tr> <tr> <td>Class Coupling</td> <td style="text-align: center">0</td> <td style="text-align: left">- 6%</td> </tr> <tr> <td>Lines of code</td> <td style="text-align: center">35</td> <td style="text-align: left">- 98</td> </tr> </tbody> </table> <p><img src="/assets/img/2023-02-16-pull-request-elegante/code-metrics.png" alt="Code_metrics"/></p> <p>As a code professional, it’s better to be recognized for the quality of my work than the speed with which I deliver. This is a great way to show off.</p> <h2 id="tests">Tests</h2> <p>Yes. It is necessary to know if this is working and if it is breaking something. Running automated tests are useful for showing that you’ve done the bare minimum expected of you. But a more detailed analysis can give an overall picture of the quality of what you’ve done specifically. Some important information is:</p> <ul> <li>How many automated tests were created</li> <li>What is the percentage of changed code coverage</li> <li>How many code streams are being tested</li> <li>Performance Variation</li> <li>What manual tests were performed</li> </ul> <p>Ex.:</p> <blockquote> <ul> <li>2 new unit tests created</li> <li>Coverage of all code streams of the method in question (2/2)</li> <li>100% code coverage on the method in question</li> <li>Increased code coverage in related methods</li> </ul> </blockquote> <p><img src="/assets/img/2023-02-16-pull-request-elegante/code-coverage.png" alt="code-coverage"/></p> <h2 id="integration">Integration</h2> <p>Sometimes the change is not with the code but with the change itself and how much it can affect the stability of the system in operation.</p> <ul> <li>Impacts other areas</li> <li>Does it impact systems already in operation?</li> <li>Is there any configuration in the system to be done?</li> </ul> <hr/> <h2 id="pr-template">PR Template:</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The purpose of these changes is __________.

### **📐Design Decisions**
To allow the creation of unit tests, it was necessary to adapt the class to the principle of **Inversion of control (SOLID)** .
All database context calls have been removed from the service class for new DAO classes `______` , `______`, `______`. The `ResgatesAgendadosService` class starts to depend on its abstractions, allowing the necessary decoupling to carry out unit tests.

![Class diagram](image.jpg)

# 🌡️Code quality
Resulting code demonstrated greater readability.
- Increased maintainability index
- Decreased Coupling of Classes
- Reduction of Cyclomatic Complexity
- Reduction of lines of code
Part of this improvement was due to *method extraction* creating ` ______()`.

![Code_metrics](image.png)
| **METRIC**                 | **INDICATOR** | **EVOLUTION** |
| -------------------------- |:-------------:|:------------ :|
| Cognitive Complexity       | 10%           | + 100%        |
| Cyclimatic Complexity      | 1             | + 100%        |
| Inheritance Depth          | 0             | - 100%        |
| Maintainability Index      | 100           | + 100%        |
| Class Coupling             | 0             | - 100%        |
| Lines of code              | 1000          | + 100%        |

# 🧪Automated Tests
   - ___ new unit tests created
   - Coverage of all code streams of the method in question (___/___)
   - ___% code coverage on the method in question
   - Increased code coverage in related methods

![tests](image.png)

Coverage
![code-cov](image.png)

</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[What should we write in our PR description?]]></summary></entry><entry xml:lang="en"><title type="html">Readability in unit tests</title><link href="https://marlonbraga.github.io/posts/readability-in-tests/" rel="alternate" type="text/html" title="Readability in unit tests"/><published>2023-02-04T12:09:00-03:00</published><updated>2023-02-04T12:09:00-03:00</updated><id>https://marlonbraga.github.io/posts/readability-in-tests</id><content type="html" xml:base="https://marlonbraga.github.io/posts/readability-in-tests/"><![CDATA[<h2 id="why-readability-and-tests">Why readability and tests?</h2> <p>Unit testing is more than automatic code validation. It also serves as documents showing what to expect and what not to expect from the method’s behavior.</p> <p>That’s why it’s especially interesting that the code is <strong>readable</strong>.</p> <p>Furthermore, unit tests are also code. Therefore, they are also sustaining maintenance. This maintenance should be as simple and fast as any other piece of code in the solution.</p> <h2 id="nomenclature">Nomenclature</h2> <p>Names matter in testicles too. During test suite execution, it is the name of the test method that will be displayed next to a pass or fail message.</p> <p><img src="/assets/img/2023-02-04-legibilidade-em-testes/execution_suit_tests.png" alt="Test Suite"/></p> <p>The most readable way to name a test is the Given/When/Then pattern.</p> <p>Being that <code class="language-plaintext highlighter-rouge">Given</code> is a precondition. <code class="language-plaintext highlighter-rouge">When</code> is an action. <code class="language-plaintext highlighter-rouge">So</code> is an expected result.</p> <p>Ex:</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">fact</span> <span class="n">that</span><span class="p">]</span>
<span class="k">void</span> <span class="nf">BankAccount_Transfer_BalanceIsReduced</span><span class="p">(){</span>
      <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is not necessary to go into too much detail. This is the name of the test. If you want to know details, read his code.</p> <h2 id="test-cleaning">Test cleaning</h2> <blockquote> <p>What makes a test clean? Three things: readability, readability and readability. (…) What makes the testicles readable? The same thing that makes all codes readable: clarity, simplicity and consistency of expression. In a test you want to say a lot with as few expressions as possible.</p> <p>– Uncle Bob, Clean Code</p> </blockquote> <h3 id="one-assertion-per-test">One assertion per test</h3> <p>Tests that come to a single conclusion are easier to understand.</p> <h3 id="one-single-concept-per-test">One single concept per test</h3> <p>One test for each example specification. We don’t want long methods that test several things one after the other.</p> <h2 id="code-structure">Code structure</h2> <p>Despite being intuitive, the AAA (Arrange-Act-Assert) pattern remains a great form of organization within the test method. The idea is that the <code class="language-plaintext highlighter-rouge">preparation of the test</code> piece of code is separated from the <code class="language-plaintext highlighter-rouge">performing the test</code> piece of code from the <code class="language-plaintext highlighter-rouge">test verification</code> piece. In practice, the coder knows where everything is without even starting to read the code.</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// arrange</span>
<span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IClientRepository</span><span class="p">&gt;();</span>
<span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Client</span><span class="p">(</span><span class="n">repository</span><span class="p">);</span>
<span class="c1">// act</span>
<span class="n">client</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>
<span class="c1">// assert</span>
<span class="n">mock</span><span class="p">.</span><span class="n">Received</span><span class="p">.</span><span class="nf">SomeMethod</span><span class="p">();</span>
</code></pre></div></div> <h2 id="tools">Tools</h2> <p>There are some tools that can help you achieve the desired readability.</p> <ul> <li><a href="https://www.nuget.org/packages/NSubstitute">NSustitute</a></li> <li><a href="https://www.nuget.org/packages/FluentAssertions">FluentAssetion</a></li> </ul> <h3 id="substitute">Substitute</h3> <p><strong>NSustitute</strong> is an alternative to <strong>Moq</strong>. With it, reading and writing the most common codes are closer to natural language. Moq is a good mocking tool in several ways. But test readability is not one of them.</p> <p>While Moq makes use of the lambda operation for the simplest situations, a mock written with NSubstitute comes closer to natural language.</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//❌with Moq</span>
<span class="n">mockUser</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">foo</span> <span class="p">=&gt;</span> <span class="n">foo</span><span class="p">.</span><span class="n">Address</span><span class="p">.</span><span class="n">Street</span><span class="p">).</span><span class="nf">Returns</span><span class="p">(</span><span class="n">street</span><span class="p">);</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())).</span><span class="nf">Returns</span><span class="p">((</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">userList</span><span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">Take</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">First</span><span class="p">());</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="m">2</span><span class="p">)).</span><span class="nf">Returns</span><span class="p">((</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">userList</span><span class="p">.</span><span class="nf">First</span><span class="p">());</span>

<span class="c1">//✔️with NSubstitute</span>
<span class="n">mockUser</span><span class="p">.</span><span class="n">Address</span><span class="p">.</span><span class="n">Street</span><span class="p">.</span><span class="nf">Returns</span><span class="p">(</span><span class="n">street</span><span class="p">);</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()).</span><span class="nf">Returns</span><span class="p">(</span><span class="n">userList</span><span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">Take</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">First</span><span class="p">();</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="m">2</span><span class="p">).</span><span class="nf">Returns</span><span class="p">(</span><span class="n">userList</span><span class="p">.</span><span class="nf">First</span><span class="p">());</span>
</code></pre></div></div> <h3 id="fluent-assessment">Fluent Assessment</h3> <p><strong>FluentAssetion</strong> is an alternative to <strong>System.Assert</strong>. This package follows the same idea as the previous one. However treated for the Assert phase of the test.</p> <p>The highlight is on the name of the methods. When combined, reading is fluid exactly as you would read a business rule in English.</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//❌with Assert</span>
<span class="n">actual</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"ABCDEFGHI"</span><span class="p">;</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"EF"</span><span class="p">,</span> <span class="n">real</span><span class="p">);</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s">"EF"</span><span class="p">,</span> <span class="n">real</span><span class="p">);</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="m">9</span><span class="p">,</span> <span class="n">real</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

<span class="c1">//✔️with FluentAssetion</span>
<span class="n">actual</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"ABCDEFGHI"</span><span class="p">;</span>
<span class="n">real</span><span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">StartWith</span><span class="p">(</span><span class="s">"AB"</span><span class="p">).</span><span class="n">And</span><span class="p">.</span><span class="nf">EndWith</span><span class="p">(</span><span class="s">"HI"</span><span class="p">).</span><span class="n">And</span><span class="p">.</span><span class="nf">Contain</span><span class="p">(</span><span class="s">"EF"</span><span class="p">).</span><span class="n">And</span><span class="p">.</span><span class="nf">HaveLength</span><span class="p">(</span><span class="m">9</span><span class="p">);</span>
</code></pre></div></div> <p>package manager</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NuGet\Install-Package NSubstitute -Version 4.4.0
NuGet\Install-Package NSubstitute.Analyzers.CSharp -Version 1.0.16
NuGet\Install-Package FluentAssertions -Version 6.9.0

</code></pre></div></div> <h2 id="why-not-use-specflow">Why not use SpecFlow?</h2> <p>It’s like the saying goes:</p> <blockquote> <p>“For those who only know how to use a hammer, every problem is a nail.”</p> </blockquote> <p>SpecFlow is a very interesting and useful tool. However, it is productive when used for the purpose for which it was created. When it runs away from it, it gets in the way more than it helps.</p> <p>SpecFlow is a BDD tool. This consists of making specifications by example with <strong>Gherkin</strong>, a common language for QA, Developer and PO. This is very useful in an <em>End-To-End test</em> and even an <em>Integrated test</em>. But the <em>unit test</em> is made and maintained only by the Developer. Therefore, it is necessary that the language of a unit test is more technical. Using Gherkin to describe functionality in a technical language is more counterproductive than using traditional tests.</p> <p>But let’s talk more about <strong>BDD+Specflow</strong> in another opportunity.</p> <p>The idea is that, for now, we leave SpecFlow out of our unit tests.</p>]]></content><author><name></name></author><category term="sample"/><category term="posts"/><category term="test"/><category term="code"/><summary type="html"><![CDATA[Tips to increase the readability of unit tests]]></summary></entry><entry xml:lang="pt-br"><title type="html">Legibilidade em testes unitários</title><link href="https://marlonbraga.github.io/posts/legibilidade-em-testes/" rel="alternate" type="text/html" title="Legibilidade em testes unitários"/><published>2023-02-04T12:09:00-03:00</published><updated>2023-02-04T12:09:00-03:00</updated><id>https://marlonbraga.github.io/posts/legibilidade-em-testes</id><content type="html" xml:base="https://marlonbraga.github.io/posts/legibilidade-em-testes/"><![CDATA[<h2 id="pra-quê-legibilidade-e-testes">Pra quê legibilidade e testes?</h2> <p>O teste unitário é mais do que uma validação automática do código. Ele também serve como documentação mostrando o que se deve e o que não se deve esperar do comportamento do método.</p> <p>Por isso é especialmente interessante que o código fique <strong>legível</strong>.</p> <p>Além disso, os testes unitário também são código. Portanto também estão suscetíveis a manutenção. Essa manutenção deve ser tão simples e rápida como qualquer outro pedaço de código da solução.</p> <h2 id="nomenclatura">Nomenclatura</h2> <p>Nomes importam em testes também. Durante a suíte de execução de testes, é o nome do método de teste que será exibido ao lado de uma mensagem de aprovação ou reprovação.</p> <p><img src="/assets/img/2023-02-04-legibilidade-em-testes/execution_suit_tests.png" alt="Suíte de Tests"/></p> <p>A maneira mais legível de se nomear um teste é através do padrão Given/When/Then (Dado/Quando/Então)</p> <p>Sendo que <code class="language-plaintext highlighter-rouge">Dado</code> é uma precondição. <code class="language-plaintext highlighter-rouge">Quando</code> é uma ação. <code class="language-plaintext highlighter-rouge">Então</code> é um resultado esperado.</p> <p>Ex:</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">fact</span><span class="p">]</span>
<span class="k">void</span> <span class="nf">ContaBancaria_Transferencia_SaldoEhReduzido</span><span class="p">(){</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Não é necessário entrar em detalhes demais. Esse é o nome do teste. Se quiserem saber detalhes, que leiam o código dele.</p> <h2 id="limpeza-de-teste">Limpeza de teste</h2> <blockquote> <p>O que torna um teste limpo? Três coisas: legibilidade, legibilidade e legibilidade. (…) O que torna os testes legíveis? O mesmo que torna todos os códigos legíveis: clareza, simplicidade e conscistência de expressão. Num teste você quer dizer muito com o mínimo de expressões possíveis.</p> <p>– Uncle Bob, Clean Code</p> </blockquote> <h3 id="uma-afirmação-por-teste">Uma afirmação por teste</h3> <p>Testes que chegam a uma única conclusão são mais fáceis de serem entendidos.</p> <h3 id="um-único-conceito-por-teste">Um único conceito por teste</h3> <p>Um teste para cada especificação de exemplo. Não queremos métodos longos que saiam testando várias coisas uma após a outra.</p> <h2 id="estrutura-de-código">Estrutura de código</h2> <p>Apesar de ser intuitivo, o padrão AAA (Arrange-Act-Assert) continua sendo uma ótima forma de organização dentro do método de teste. A ideia é que o trecho de código de <code class="language-plaintext highlighter-rouge">preparação do teste</code> seja separada do trecho de <code class="language-plaintext highlighter-rouge">realização do teste</code> do trecho de <code class="language-plaintext highlighter-rouge">verificação do teste</code>. Na prática, o codificador sabe aonde tudo está sem nem mesmo começar a ler o código.</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// arranque</span>
<span class="kt">var</span> <span class="n">repositorio</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IClienteRepositorio</span><span class="p">&gt;();</span>
<span class="kt">var</span> <span class="n">cliente</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Cliente</span><span class="p">(</span><span class="n">repositorio</span><span class="p">);</span>
<span class="c1">// ação</span>
<span class="n">cliente</span><span class="p">.</span><span class="nf">Salvar</span><span class="p">();</span>
<span class="c1">// assertiva</span>
<span class="n">mock</span><span class="p">.</span><span class="n">Received</span><span class="p">.</span><span class="nf">AlgumMetodo</span><span class="p">();</span>
</code></pre></div></div> <p>Para mais detalhes sobre o padrão AAA, ,eu sugiro esse artigo aqui: <a href="https://medium.com/@pablodarde/o-padr%C3%A3o-triple-a-arrange-act-assert-741e2a94cf88">O Padrão Triple A (Arrange, Act, Assert)</a></p> <h2 id="ferramentas">Ferramentas</h2> <p>Há algumas ferramentas que podem ajudar a alcançar a legibilidade desejada.</p> <ul> <li><a href="https://www.nuget.org/packages/NSubstitute">NSustitute</a></li> <li><a href="https://www.nuget.org/packages/FluentAssertions">FluentAssetion</a></li> </ul> <h3 id="nsustitute">NSustitute</h3> <p><strong>NSustitute</strong> é uma alternativa ao <strong>Moq</strong>. Com ele, a leitura e a escrita de códigos mais comuns se aproxima da linguagem natural. O Moq é uma boa ferramenta de Mock em vários pontos. Mas a legibilidade do teste, não é uma delas.</p> <p>Enquanto o Moq faz uso de operação lambda para as situações mais simples, um mock escrito com NSubstitute se aproxima mais na linguagem natual.</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//❌com Moq</span>
<span class="n">mockUser</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">foo</span> <span class="p">=&gt;</span> <span class="n">foo</span><span class="p">.</span><span class="n">Address</span><span class="p">.</span><span class="n">Street</span><span class="p">).</span><span class="nf">Returns</span><span class="p">(</span><span class="n">street</span><span class="p">);</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())).</span><span class="nf">Returns</span><span class="p">((</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">userList</span><span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">Take</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">First</span><span class="p">());</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="m">2</span><span class="p">)).</span><span class="nf">Returns</span><span class="p">((</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">userList</span><span class="p">.</span><span class="nf">First</span><span class="p">());</span>

<span class="c1">//✔️com NSubstitute</span>
<span class="n">mockUser</span><span class="p">.</span><span class="n">Address</span><span class="p">.</span><span class="n">Street</span><span class="p">.</span><span class="nf">Returns</span><span class="p">(</span><span class="n">street</span><span class="p">);</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()).</span><span class="nf">Returns</span><span class="p">(</span><span class="n">userList</span><span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">Take</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">First</span><span class="p">());</span>
<span class="n">mock</span><span class="p">.</span><span class="nf">SearchById</span><span class="p">(</span><span class="m">2</span><span class="p">).</span><span class="nf">Returns</span><span class="p">(</span><span class="n">userList</span><span class="p">.</span><span class="nf">First</span><span class="p">());</span>
</code></pre></div></div> <h3 id="fluentassetion">FluentAssetion</h3> <p><strong>FluentAssetion</strong> é uma alternativa ao <strong>System.Assert</strong>. Esse package segue a mesma ideia da anterior. Porém voltada para a fase de Assert do teste.</p> <p>O destaque está no nome dos métodos. Quando combinados, a leitura fica fluída exatamente como leria uma regra de negócio em inglês.</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//❌com Assert</span>
<span class="kt">string</span> <span class="n">actual</span> <span class="p">=</span> <span class="s">"ABCDEFGHI"</span><span class="p">;</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"EF"</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s">"EF"</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="m">9</span><span class="p">,</span> <span class="n">actual</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

<span class="c1">//✔️com FluentAssetion</span>
<span class="kt">string</span> <span class="n">actual</span> <span class="p">=</span> <span class="s">"ABCDEFGHI"</span><span class="p">;</span>
<span class="n">actual</span><span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">StartWith</span><span class="p">(</span><span class="s">"AB"</span><span class="p">).</span><span class="n">And</span><span class="p">.</span><span class="nf">EndWith</span><span class="p">(</span><span class="s">"HI"</span><span class="p">).</span><span class="n">And</span><span class="p">.</span><span class="nf">Contain</span><span class="p">(</span><span class="s">"EF"</span><span class="p">).</span><span class="n">And</span><span class="p">.</span><span class="nf">HaveLength</span><span class="p">(</span><span class="m">9</span><span class="p">);</span>
</code></pre></div></div> <p>Package Manager</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NuGet\Install-Package NSubstitute -Version 4.4.0
NuGet\Install-Package NSubstitute.Analyzers.CSharp -Version 1.0.16
NuGet\Install-Package FluentAssertions -Version 6.9.0

</code></pre></div></div> <h2 id="por-que-não-usar-o-specflow">Por que não usar o SpecFlow?</h2> <p>É como diz o ditado:</p> <blockquote> <p>“Para quem só sabe usar martelo, todo problema é um prego.”</p> </blockquote> <p>SpecFlow é uma ferramenta muito interessante e útil. Porém, ela é produtiva quando usada para o fim da qual foi criada. Quando foge disso, ela atrapalha mais do que ajuda.</p> <p>SpecFlow é uma ferramenta de BDD. Essa, consiste em realizar especificação por exemplos com <strong>Gherkin</strong>, uma linguagem comum a QA, Desenvolvedor e PO. Isso é muito útil em um <em>teste End-To-End</em> e até em um <em>teste de Integração</em>. Mas o teste unitário é feito e mantido apenas pelo Desenvolvedor. Por isso, é necessário que a linguagem de um teste unitário seja mais técnica. Usar o <strong>Gherkin</strong> para descrever a funcionalidade em uma linguagem técnica é mais improdutivo do que usar os testes tradicionais.</p> <p>Mas vamos falar mais do <strong>BDD+Specflow</strong> em outra oportunidade.</p> <p>A ideia é que, por hora, deixemos o SpecFlow de fora dos nossos testes unitário.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="test"/><category term="code"/><summary type="html"><![CDATA[Dicas para aumentar a legibilidade de testes unitários]]></summary></entry><entry xml:lang="en"><title type="html">Code Pattern</title><link href="https://marlonbraga.github.io/posts/code-pattern/" rel="alternate" type="text/html" title="Code Pattern"/><published>2023-01-31T12:09:00-03:00</published><updated>2023-01-31T12:09:00-03:00</updated><id>https://marlonbraga.github.io/posts/code-pattern</id><content type="html" xml:base="https://marlonbraga.github.io/posts/code-pattern/"><![CDATA[<h3 id="-back-end"><img src="https://cdn-icons-png.flaticon.com/512/6132/6132221.png" width="20" height="20"/> Back-End</h3> <p>Developers spend more time reading source code than writing one. To increase the professional’s productivity, a code that is easy to read and understand makes a difference.</p> <p>Clean Code addresses very relevant points for a more readable code. However, there is an additional approach: Code Standardization.</p> <p>The idea is that the team not only receives clean code but also a code style that they are already familiar with and used to dealing with on a daily basis. For this, all developers on the team must write in the same style. Style that will be defined in a best practices document for the team.</p> <p>Below is a markdown template from a code pattern documentation.</p> <h4 id="nomenclature">Nomenclature</h4> <table> <thead> <tr> <th><strong>ELEMENT</strong></th> <th style="text-align: center"><strong>PART OF SPEECH</strong></th> <th style="text-align: center"><strong>RULE</strong></th> <th><strong>EXAMPLE</strong></th> </tr> </thead> <tbody> <tr> <td>Class</td> <td style="text-align: center">Substantive</td> <td style="text-align: center">PascalCase</td> <td><code class="language-plaintext highlighter-rouge">Product</code></td> </tr> <tr> <td>Interface</td> <td style="text-align: center">Substantive</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">I</code>+PascalCase</td> <td><code class="language-plaintext highlighter-rouge">IProduct</code></td> </tr> <tr> <td>Method</td> <td style="text-align: center">Verb</td> <td style="text-align: center">PascalCase</td> <td><code class="language-plaintext highlighter-rouge">ListTickets</code></td> </tr> <tr> <td>Property</td> <td style="text-align: center">-</td> <td style="text-align: center">PascalCase</td> <td><code class="language-plaintext highlighter-rouge">Tickets</code></td> </tr> <tr> <td>Public Variables</td> <td style="text-align: center">-</td> <td style="text-align: center">camelCase</td> <td><code class="language-plaintext highlighter-rouge">idProduct</code></td> </tr> <tr> <td>Private Variables</td> <td style="text-align: center">-</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">_</code>+camelCase</td> <td><code class="language-plaintext highlighter-rouge">_totalReceipt</code></td> </tr> <tr> <td>Constant</td> <td style="text-align: center">-</td> <td style="text-align: center">PascalCase</td> <td><code class="language-plaintext highlighter-rouge">PageTitle</code></td> </tr> </tbody> </table> <h5 id="indentation-and-spacing">Indentation and Spacing</h5> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    workingDays++; // ✅ 4 spaces
workingDays++;     // ❌ no spacing
  workingDays++;   // ❌ 2 spaces
}
</code></pre></div></div> <p>#####</p> <p>Each line should contain only one code statement.<br/> ❌</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i++; counter++; _totalReceipt=0;  
</code></pre></div></div> <p>✅</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i++;  
counter++;  
_totalReceipt=0;  
</code></pre></div></div> <h4 id="general-rules">General rules</h4> <ul> <li>Numeric type of monetary values must be <code class="language-plaintext highlighter-rouge">decimal</code><br/> ✅ <code class="language-plaintext highlighter-rouge">private decimal annualBilling;</code><br/> ❌ <code class="language-plaintext highlighter-rouge">private double annualBilling;</code><br/> ❌ <code class="language-plaintext highlighter-rouge">private float annualBilling;</code></li> <li>Every <code class="language-plaintext highlighter-rouge">Exception</code> must be logged.</li> </ul> <h4 id="performance">Performance</h4> <ul> <li>Avoid using <code class="language-plaintext highlighter-rouge">ToList()</code>, it causes all records to be loaded into memory. Prefer <code class="language-plaintext highlighter-rouge">IQueryable</code> and <code class="language-plaintext highlighter-rouge">IEnumerable</code> returns, and only pop into memory when needed.</li> <li>Release the resources you take, using <code class="language-plaintext highlighter-rouge">Using</code> in the <code class="language-plaintext highlighter-rouge">IDisposable</code> classes (Example: <code class="language-plaintext highlighter-rouge">sqlConnetion</code>). Prefer <code class="language-plaintext highlighter-rouge">using</code> to <code class="language-plaintext highlighter-rouge">try/finally</code>.</li> <li>Use <code class="language-plaintext highlighter-rouge">early return</code> instead of multiple nested IFs.</li> </ul> <h4 id="automated-tests">Automated tests</h4> <ul> <li>Automated tests should be easy to read, short and only test one thing. Use the default <code class="language-plaintext highlighter-rouge">Arrange/Act/Assert</code>.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="code"/><summary type="html"><![CDATA[Possible code guidance for teams]]></summary></entry><entry xml:lang="pt-br"><title type="html">Um post em português</title><link href="https://marlonbraga.github.io/posts/pt-br-test/" rel="alternate" type="text/html" title="Um post em português"/><published>2023-01-31T12:09:00-03:00</published><updated>2023-01-31T12:09:00-03:00</updated><id>https://marlonbraga.github.io/posts/pt-br-test</id><content type="html" xml:base="https://marlonbraga.github.io/posts/pt-br-test/"><![CDATA[<h2 id="equations">Equations</h2> <p>Texto <strong>em</strong> <strong>pt-br</strong> No <strong>language</strong> indicated, so no <em>syntax highlighting.</em> But let’s throw in a No language <del>indicated,</del> so no <strong>syntax</strong> highlighting. But let’s throw in a No language indicated, so no syntax highlighting. But let’s throw in a</p> <hr/> <h1 id="comandos-do-blog">Comandos do blog:</h1> <p>Iniciar servidor local:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="n">bundle</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nx">serve</span><span class="w">
</span></code></pre></div></div> <p>Deploy em produção:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    bin/deploy <span class="nt">--user</span>
</code></pre></div></div> <p><img src="/assets/img/9.jpg" alt="&quot;ddf&quot;"/></p> <h2 id="table">Table</h2> <table> <thead> <tr> <th><strong>MÉTRICA</strong></th> <th style="text-align: center"><strong>INDICADOR</strong></th> <th style="text-align: center"><strong>COMPARATIVO</strong></th> </tr> </thead> <tbody> <tr> <td>Índice de Manutenibilidade</td> <td style="text-align: center">51</td> <td style="text-align: center">+ 27%</td> </tr> <tr> <td>Complexidade Ciclimática</td> <td style="text-align: center">5</td> <td style="text-align: center">- 42%</td> </tr> <tr> <td>Acoplamento de Classes</td> <td style="text-align: center">0</td> <td style="text-align: center">- 6%</td> </tr> <tr> <td>Linhas de código</td> <td style="text-align: center">35</td> <td style="text-align: center">- 98</td> </tr> </tbody> </table> <h2 id="simple-notation">Simple notation</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <h2 id="c-sharp">C-Sharp</h2> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="kt">string</span> <span class="nf">Method</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="highlight">Highlight</h2> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="p">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="p">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="nf">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="p">=</span> <span class="n">myString</span><span class="p">.</span><span class="nf">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="p">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="p">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="p">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="diagram">Diagram</h2> <div class="jekyll-diagrams diagrams mermaid"> <svg aria-roledescription="sequence" viewBox="-50 -10 485 259" style="max-width: 485px; background-color: transparent;" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="100%" id="mermaid-1681710505586"><style>#mermaid-1681710505586{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc}#mermaid-1681710505586 .error-icon{fill:#a44141}#mermaid-1681710505586 .error-text{fill:#ddd;stroke:#ddd}#mermaid-1681710505586 .edge-thickness-normal{stroke-width:2px}#mermaid-1681710505586 .edge-thickness-thick{stroke-width:3.5px}#mermaid-1681710505586 .edge-pattern-solid{stroke-dasharray:0}#mermaid-1681710505586 .edge-pattern-dashed{stroke-dasharray:3}#mermaid-1681710505586 .edge-pattern-dotted{stroke-dasharray:2}#mermaid-1681710505586 .marker{fill:lightgrey;stroke:lightgrey}#mermaid-1681710505586 .marker.cross{stroke:lightgrey}#mermaid-1681710505586 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px}#mermaid-1681710505586 .actor{stroke:#81b1db;fill:#1f2020}#mermaid-1681710505586 text.actor&gt;tspan{fill:lightgrey;stroke:none}#mermaid-1681710505586 .actor-line{stroke:lightgrey}#mermaid-1681710505586 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey}#mermaid-1681710505586 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey}#mermaid-1681710505586 #arrowhead path{fill:lightgrey;stroke:lightgrey}#mermaid-1681710505586 .sequenceNumber{fill:black}#mermaid-1681710505586 #sequencenumber{fill:lightgrey}#mermaid-1681710505586 #crosshead path{fill:lightgrey;stroke:lightgrey}#mermaid-1681710505586 .messageText{fill:lightgrey;stroke:none}#mermaid-1681710505586 .labelBox{stroke:#81b1db;fill:#1f2020}#mermaid-1681710505586 .labelText,#mermaid-1681710505586 .labelText&gt;tspan{fill:lightgrey;stroke:none}#mermaid-1681710505586 .loopText,#mermaid-1681710505586 .loopText&gt;tspan{fill:lightgrey;stroke:none}#mermaid-1681710505586 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#81b1db;fill:#81b1db}#mermaid-1681710505586 .note{stroke:hsl(180,0,18.3529411765%);fill:hsl(180,1.5873015873%,28.3529411765%)}#mermaid-1681710505586 .noteText,#mermaid-1681710505586 .noteText&gt;tspan{fill:rgb(183.8476190475,181.5523809523,181.5523809523);stroke:none}#mermaid-1681710505586 .activation0{fill:hsl(180,1.5873015873%,28.3529411765%);stroke:#81b1db}#mermaid-1681710505586 .activation1{fill:hsl(180,1.5873015873%,28.3529411765%);stroke:#81b1db}#mermaid-1681710505586 .activation2{fill:hsl(180,1.5873015873%,28.3529411765%);stroke:#81b1db}#mermaid-1681710505586 .actorPopupMenu{position:absolute}#mermaid-1681710505586 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0 8px 16px 0 rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / .4))}#mermaid-1681710505586 .actor-man line{stroke:#81b1db;fill:#1f2020}#mermaid-1681710505586 .actor-man circle,#mermaid-1681710505586 line{stroke:#81b1db;fill:#1f2020;stroke-width:2px}#mermaid-1681710505586 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif}</style><g/><defs><symbol height="24" width="24" id="computer"><path d="M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z" transform="scale(.5)"/></symbol></defs><defs><symbol clip-rule="evenodd" fill-rule="evenodd" id="database"><path d="M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z" transform="scale(.5)"/></symbol></defs><defs><symbol height="24" width="24" id="clock"><path d="M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z" transform="scale(.5)"/></symbol></defs><g><line stroke="#999" stroke-width="0.5px" class="200" y2="193" x2="75" y1="5" x1="75" id="actor0"/><g id="root-0"><rect class="actor" ry="3" rx="3" height="65" width="150" stroke="#666" fill="#eaeaea" y="0" x="0"/><text style="text-anchor: middle; font-size: 16px; font-weight: 400;" class="actor" alignment-baseline="central" dominant-baseline="central" y="32.5" x="75"><tspan dy="0" x="75">John</tspan></text></g></g><g><line stroke="#999" stroke-width="0.5px" class="200" y2="193" x2="310" y1="5" x1="310" id="actor1"/><g id="root-1"><rect class="actor" ry="3" rx="3" height="65" width="150" stroke="#666" fill="#eaeaea" y="0" x="235"/><text style="text-anchor: middle; font-size: 16px; font-weight: 400;" class="actor" alignment-baseline="central" dominant-baseline="central" y="32.5" x="310"><tspan dy="0" x="310">Alice</tspan></text></g></g><defs><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="9" id="arrowhead"><path d="M 0 0 L 10 5 L 0 10 z"/></marker></defs><defs><marker refY="5" refX="4" orient="auto" markerHeight="8" markerWidth="15" id="crosshead"><path style="stroke-dasharray: 0, 0;" d="M 1,2 L 6,7 M 6,2 L 1,7" stroke-width="1pt" stroke="#000000" fill="none"/></marker></defs><defs><marker orient="auto" markerHeight="28" markerWidth="20" refY="7" refX="18" id="filled-head"><path d="M 18,7 L9,13 L14,7 L9,1 Z"/></marker></defs><defs><marker orient="auto" markerHeight="40" markerWidth="60" refY="15" refX="15" id="sequencenumber"><circle r="6" cy="15" cx="15"/></marker></defs><text style="font-size: 16px; font-weight: 400;" dy="1em" class="messageText" alignment-baseline="middle" dominant-baseline="middle" text-anchor="middle" y="80" x="193">Hello John, how are you?</text><line style="fill: none;" marker-end="url(#arrowhead)" stroke="none" stroke-width="2" class="messageLine0" y2="109" x2="75" y1="109" x1="310"/><text style="font-size: 16px; font-weight: 400;" dy="1em" class="messageText" alignment-baseline="middle" dominant-baseline="middle" text-anchor="middle" y="124" x="193">Great!</text><line style="stroke-dasharray: 3, 3; fill: none;" marker-end="url(#arrowhead)" stroke="none" stroke-width="2" class="messageLine1" y2="153" x2="310" y1="153" x1="75"/><g><rect class="actor" ry="3" rx="3" height="65" width="150" stroke="#666" fill="#eaeaea" y="173" x="0"/><text style="text-anchor: middle; font-size: 16px; font-weight: 400;" class="actor" alignment-baseline="central" dominant-baseline="central" y="205.5" x="75"><tspan dy="0" x="75">John</tspan></text></g><g><rect class="actor" ry="3" rx="3" height="65" width="150" stroke="#666" fill="#eaeaea" y="173" x="235"/><text style="text-anchor: middle; font-size: 16px; font-weight: 400;" class="actor" alignment-baseline="central" dominant-baseline="central" y="205.5" x="310"><tspan dy="0" x="310">Alice</tspan></text></g></svg> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Um exemplo de postagem de blog multilíngue]]></summary></entry></feed>